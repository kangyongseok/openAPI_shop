{"version":3,"sources":["component/Products.js","App.js","serviceWorker.js","index.js"],"names":["Products","react_default","a","createElement","className","this","props","name","Products_ProductInfo","info","Component","ProductInfo","App","state","products","_getProductsInfo","fetch","then","response","text","stringToXml","XMLParser","parseFromString","item","children","i","length","getElementsByTagName","value","id","_this","setState","Object","toConsumableArray","concat","catch","err","console","log","_renderProducts","map","product","index","src_component_Products","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ySAGMA,0LAEE,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,UAAKE,KAAKC,MAAMC,MAChBN,EAAAC,EAAAC,cAACK,EAAD,CAAaC,KAAMJ,KAAKC,MAAMG,eALvBC,cAYjBC,mLAEE,OACIV,EAAAC,EAAAC,cAAA,WACKE,KAAKC,MAAMG,aAJFC,aAUXV,ICsDAY,oNAtEbC,MAAQ,CAENC,SAAS,MASXC,iBAAmB,WACjBC,MAAM,yMACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAE1BF,KAAK,SAAAG,GAAW,OAAI,IAAIC,KAAYC,gBAAgBF,KAEpDH,KAAK,SAAAM,GAAI,OAAIA,EAAKC,SAAS,GAAGA,WAC9BP,KAAK,SAAAf,GACJ,IAAI,IAAIuB,EAAI,EAAGA,EAAIvB,EAAEwB,OAAQD,IAAK,CAChC,IAAIlB,EAAOL,EAAEuB,GAAGE,qBAAqB,YAAY,GAAGC,MAChDC,EAAK3B,EAAEuB,GAAGE,qBAAqB,UAAU,GAAGC,MAChD,GAA4B,IAAzB1B,EAAEuB,GAAGD,SAASE,OACfI,EAAKC,SAAS,CACZjB,SAASkB,OAAAC,EAAA,EAAAD,CACJF,EAAKjB,MAAMC,UADRoB,OAAA,CAEN,CACEL,GAAIA,EACJtB,KAAKA,WAIN,CACL,IAAIE,EAAOP,EAAEuB,GAAGE,qBAAqB,cAAc,GAAGC,MACtDE,EAAKC,SAAS,CACZjB,SAASkB,OAAAC,EAAA,EAAAD,CACJF,EAAKjB,MAAMC,UADRoB,OAAA,CAEN,CACEL,GAAIA,EACJtB,KAAKA,EACLE,KAAKA,WAOhB0B,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAM5BG,gBAAkB,WAIhB,OAHiBT,EAAKjB,MAAMC,SAAS0B,IAAI,SAACC,EAASC,GACjD,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,CAAUpC,KAAMkC,EAAQlC,KAAME,KAAMgC,EAAQhC,KAAMmC,IAAKF,0FA/ChErC,KAAKU,oDAsDL,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZC,KAAKkC,0BAlEI7B,cCKEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.2a2b1dce.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Products.css';\r\n\r\nclass Products extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"productCard\">\r\n                <h3>{this.props.name}</h3>\r\n                <ProductInfo info={this.props.info} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass ProductInfo extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.info}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Products;","import React, { Component } from 'react';\nimport XMLParser from 'react-xml-parser';\nimport Products from './component/Products';\nimport './App.css';\n\n\n\nclass App extends Component {\n\n  state = {\n\n    products:[\n      \n    ]\n  }\n\n  componentDidMount() {\n    this._getProductsInfo();\n  }\n\n  _getProductsInfo = () => {\n    fetch('http://openapi.price.go.kr/openApiImpl/ProductPriceInfoService/getProductInfoSvc.do?ServiceKey=CJc1eCI%2BlQBdxfrnhKxrK%2BKHE8MMSUkMw7R8inyl1m%2BWcFiTd1Wv7iLVaOq3IECUnn40xW1zj%2Fotcnv5qMs1%2FQ%3D%3D')\n    .then(response => response.text())\n    // .then(xmlText => console.log(xmlText))\n    .then(stringToXml => new XMLParser().parseFromString(stringToXml))\n    // .then(xml => console.log(xml))\n    .then(item => item.children[0].children)\n    .then(a => {\n      for(let i = 0; i < a.length; i++) {\n        let name = a[i].getElementsByTagName('goodName')[0].value;\n        let id = a[i].getElementsByTagName('goodId')[0].value;\n        if(a[i].children.length === 8) {\n          this.setState({\n            products:[\n              ...this.state.products,\n              {\n                id: id,\n                name:name\n              }\n            ]\n          })\n        } else {\n          let info = a[i].getElementsByTagName('detailMean')[0].value;\n          this.setState({\n            products:[\n              ...this.state.products,\n              {\n                id: id,\n                name:name,\n                info:info\n              }\n            ]\n          })\n        }\n      }\n    })\n    .catch(err => console.log(err))\n  }\n\n\n \n\n  _renderProducts = () => {\n    const products = this.state.products.map((product, index) => {\n      return <Products name={product.name} info={product.info} key={index} />\n    })\n    return products\n  }\n\n  \n  render() {\n    return (\n      <div className=\"App\">\n        {this._renderProducts()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}